<?phpnamespace app\admin\controller;use think\Controller;use think\Db;use think\JWT;/* * 1.验证权限 * 2.验证请求方式 * 3.接受前台发布的数据 * 4.前台数据验证 * 5.处理业务逻辑 * */class Login extends Controller{    //请求的方式    public function check()    {        //请求方法        $method = $this->request->method();        //echo $method;        if ($method != 'POST') {            return json([                'code' => 404,                'msg' => '请求方式错误'            ]);        }        //echo "success";        // 请求的数据        $data = $this->request->post();        //var_dump($data);        //Login  验证器        $validate = validate('Login');        $flag = $validate->scene('login')->check($data);        //var_dump($flag);        if (!$flag) {            return json([                'code' => 404,                'msg' => $validate->getError()            ]);        }        $whereArr = ['username'=>$data['username']];        $user = Db::table('admin')->where($whereArr)->find();        if($user){            $password = md5(crypt($data['password'],config('salt')));            if ($password===$user['password']){                $payload = [                    'id'=>$user['uid'],                    'username'=>$user['username'],                    'avatar'=> $user['avatar']                ];                //签发token                $token = JWT::getToken($payload,config('jwtkey'));                return json([                    'code' => 200,                    'msg' => "登录成功！",                    'token'=>$token,                    'user'=>$payload                ]);            }else{                return json([                    'code' => 404,                    'msg' => "用户名密码不匹配"                ]);            }        }else{            return json([                'code' => 404,                'msg' => "该用户名不存在"            ]);        }//      客户端访问服务器 vue 不发起请求//      不同端口号//      服务器压力太大 存储的太多        //JWT JSON web token 应用环境间传递声明而执行的一种基于JSON 的开放标准 实现无状态分布式的web 应用授权//        登录     ->    账号密码验证通过//                           |//        jwt保存本地   <-    生成JWT//            |//        跳转登录页--jwt--->过滤器拦截请求//                           |//                          验证////        jwt//        token    }    /*     * 1.修改管理员密码     *     * */    public function editPass(){        checkToken();        if(!$this->request->isPost()){            return json([                'code'=>404,                'msg'=>'请求方式错误'            ]);        }        $data = $this->request->post();        $validate = validate('Login');        if(!$validate->scene('editpass')->check($data)){            return json([                'code'=>404,                'msg'=>$validate->getError()            ]);        }        $oldpass = password($data['oldpass']);        $newpass = password($data['newpass']);        $newpass2 = password($data['newpass2']);        if($newpass == $oldpass){            return json([                'code'=>404,                'msg'=>'原密码和新密码不能够相同'            ]);        }//        if($newpass != $newpass2){//            return json([//                'code'=>404,//                'msg'=>'两次输入的密码不一致'//            ]);//        }        $id = $this->request->id;        $result= Db::table('admin')->field('password')->where('uid','=',$id)->select();        //var_dump($result);        $password = $result[0]['password'];        //var_dump($password);        if($password != $oldpass){            return json([                'code'=>404,                'msg'=>'原密码错误'            ]);        }       $a =  Db::table('admin')->where('uid',$id)->update(['password'=>$newpass]);        if($a){            return json([                'code'=>200,                'msg'=>'密码更新成功'            ]);        }  }}